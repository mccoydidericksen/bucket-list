[{"/Users/mccoydidericksen/bootcamp/bucket-list/src/index.js":"1","/Users/mccoydidericksen/bootcamp/bucket-list/src/App.js":"2","/Users/mccoydidericksen/bootcamp/bucket-list/src/components/BucketList.js":"3","/Users/mccoydidericksen/bootcamp/bucket-list/src/components/Bucket.js":"4","/Users/mccoydidericksen/bootcamp/bucket-list/src/components/BucketForm.js":"5"},{"size":197,"mtime":1677784721229,"results":"6","hashOfConfig":"7"},{"size":192,"mtime":1677784721228,"results":"8","hashOfConfig":"7"},{"size":1841,"mtime":1677784721229,"results":"9","hashOfConfig":"7"},{"size":1576,"mtime":1677784721228,"results":"10","hashOfConfig":"7"},{"size":2811,"mtime":1677791561212,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xy6xba",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mccoydidericksen/bootcamp/bucket-list/src/index.js",[],"/Users/mccoydidericksen/bootcamp/bucket-list/src/App.js",[],"/Users/mccoydidericksen/bootcamp/bucket-list/src/components/BucketList.js",["24"],"/Users/mccoydidericksen/bootcamp/bucket-list/src/components/Bucket.js",["25"],"import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\n\nfunction Bucket(props) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: '',\n    eagerness: '',\n  });\n\n  console.log(props.bucket);\n\n  const submitUpdate = (value) => {\n\n    // TODO: Write logic to update the `edit` value in state after a user updates an entry in the list\n\n    // TODO: Set the key:value pairs in the `edit` object back to empty strings\n\n  };\n\n  // If the user is attempting to edit an item, render the bucket form with the edit variable passed as a prop\n  if (edit.id) {\n    return <BucketForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return props.bucket.map((item, index) => (\n    // TODO: Add a className of `bucket row complete ${item.eagerness}` for completed items, and `bucket-row ${item.eagerness}` for non-completed items\n    // TODO: Add a key attribute set to the value of the index position\n    // Hint: use a ternary operator\n    <div className={ } key={}>\n\n      // TODO: Add an onClick event that invokes the `completeBucketItem` method passing the item id as a argument\n      <div key={} onClick={}>\n          {/* TODO: Add the item text here */}\n      </div>\n      <div className=\"icons\">\n        // TODO: Add an onClick event update the `edit` object with the `id`, `value`, and `eagerness` properties\n        <p onClick={}> ‚úèÔ∏è</p>\n        {/* TODO: Add an onClick event that will invoke the removeBucketItem method passing in the `item.id` */}\n        <p onClick={}> üóëÔ∏è</p>\n      </div>\n    </div>\n  ));\n}\n\nexport default Bucket;\n",["26","27"],"/Users/mccoydidericksen/bootcamp/bucket-list/src/components/BucketForm.js",[],{"ruleId":"28","severity":1,"message":"29","line":18,"column":43,"nodeType":"30","messageId":"31","endLine":18,"endColumn":45},{"ruleId":null,"fatal":true,"severity":2,"message":"32","line":30,"column":20},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Parsing error: JSX attributes must only be assigned a non-empty expression.\n\n\u001b[0m \u001b[90m 28 |\u001b[39m     \u001b[90m// TODO: Add a key attribute set to the value of the index position\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 29 |\u001b[39m     \u001b[90m// Hint: use a ternary operator\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 30 |\u001b[39m     \u001b[33m<\u001b[39m\u001b[33mdiv\u001b[39m className\u001b[33m=\u001b[39m{ } key\u001b[33m=\u001b[39m{}\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 31 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 32 |\u001b[39m       \u001b[90m// TODO: Add an onClick event that invokes the `completeBucketItem` method passing the item id as a argument\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 33 |\u001b[39m       \u001b[33m<\u001b[39m\u001b[33mdiv\u001b[39m key\u001b[33m=\u001b[39m{} onClick\u001b[33m=\u001b[39m{}\u001b[33m>\u001b[39m\u001b[0m","no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-global-assign","no-unsafe-negation"]