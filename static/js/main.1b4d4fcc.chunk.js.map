{"version":3,"sources":["components/BucketForm.js","components/Bucket.js","components/BucketList.js","App.js","index.js"],"names":["BucketForm","props","_props$edit","_edit$text","_edit$eagerness","edit","_useState","useState","text","_useState2","_slicedToArray","input","setInput","_useState3","eagerness","_useState4","setEagerness","eagernessLevel","handleSubmit","e","_edit$id","preventDefault","onSubmit","id","Math","floor","random","handleChange","target","value","_jsxs","children","className","_jsx","type","placeholder","name","onChange","clsx","onClick","Bucket","setEdit","console","log","bucket","editBucketItem","map","item","index","_clsx","_defineProperty","completed","completeBucketItem","removeBucketItem","BucketList","setBucket","concat","_toConsumableArray","updatedBucket","_objectSpread","filteredBucket","filter","itemId","newValue","prev","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b4d4fcc.chunk.js","sourcesContent":["import clsx from \"clsx\";\nimport React, { useState } from \"react\";\n\nfunction BucketForm(props) {\n\tlet edit = props.edit ?? {};\n\tconst [input, setInput] = useState(edit.text ?? \"\");\n\tlet [eagerness, setEagerness] = useState(edit.eagerness ?? \"\");\n\n\tconst eagernessLevel = [\"high\", \"medium\", \"low\"];\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\tif (!eagerness) {\n\t\t\teagerness = \"low\";\n\t\t}\n\n\t\tprops.onSubmit({\n\t\t\tid: edit.id ?? Math.floor(Math.random() * 1000),\n\t\t\ttext: input,\n\t\t\teagerness: eagerness,\n\t\t});\n\n\t\tsetInput(\"\");\n\t\tsetEagerness(\"\");\n\t};\n\n\tconst handleChange = (e) => {\n\t\tsetInput(e.target.value);\n\t};\n\n\t// First we check to see if \"edit\" prop exists. If not, we render the normal form\n\t// If the prop \"edit\" exists, we know to render the update form instead\n\treturn !props.edit ? (\n\t\t<div>\n\t\t\t<form className=\"bucket-form\" onSubmit={handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Add to your bucket list\"\n\t\t\t\t\tvalue={input}\n\t\t\t\t\tname=\"text\"\n\t\t\t\t\tclassName=\"bucket-input\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t></input>\n\t\t\t\t<div className=\"dropdown\">\n\t\t\t\t\t<button className={clsx(`dropbtn`, eagerness)}>\n\t\t\t\t\t\t{eagerness || \"Priority\"}\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"dropdown-content\">\n\t\t\t\t\t\t{/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n\t\t\t\t\t\t<p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\n\t\t\t\t\t\t<p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\n\t\t\t\t\t\t<p onClick={() => setEagerness(eagernessLevel[2])}>\n\t\t\t\t\t\t\tTake it or leave it\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<button className=\"bucket-button\">Add bucket list item</button>\n\t\t\t</form>\n\t\t</div>\n\t) : (\n\t\t<div>\n\t\t\t<h3>Update entry: {props.edit.value}</h3>\n\t\t\t<form className=\"bucket-form\" onSubmit={handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder={props.edit.value}\n\t\t\t\t\tvalue={input}\n\t\t\t\t\tname=\"text\"\n\t\t\t\t\tclassName=\"bucket-input\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t></input>\n\t\t\t\t<div className=\"dropdown\">\n\t\t\t\t\t<button className={clsx(`dropbtn`, eagerness)}>\n\t\t\t\t\t\t{eagerness || \"Priority\"}\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"dropdown-content\">\n\t\t\t\t\t\t{/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n\t\t\t\t\t\t<p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\n\t\t\t\t\t\t<p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\n\t\t\t\t\t\t<p onClick={() => setEagerness(eagernessLevel[2])}>\n\t\t\t\t\t\t\tTake it or leave it\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<button className=\"bucket-button\">Update</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n\nexport default BucketForm;\n","import clsx from \"clsx\";\nimport React, { useState } from \"react\";\nimport BucketForm from \"./BucketForm\";\n\nfunction Bucket(props) {\n\tconst [edit, setEdit] = useState({\n\t\tid: null,\n\t\tvalue: \"\",\n\t\teagerness: \"\",\n\t});\n\n\tconsole.log(props.bucket);\n\n\tconst submitUpdate = (value) => {\n\t\t// TODO: Write logic to update the `edit` value in state after a user updates an entry in the list\n\t\tprops.editBucketItem(value.id, value);\n\t\t// TODO: Set the key:value pairs in the `edit` object back to empty strings\n\t\tsetEdit({ id: null, value: \"\", eagerness: \"\" });\n\t};\n\n\t// If the user is attempting to edit an item, render the bucket form with the edit variable passed as a prop\n\tif (edit.id) {\n\t\treturn <BucketForm edit={edit} onSubmit={submitUpdate} />;\n\t}\n\n\treturn props.bucket.map((item, index) => (\n\t\t// TODO: Add a className of `bucket row complete ${item.eagerness}` for completed items, and `bucket-row ${item.eagerness}` for non-completed items\n\n\t\t// TODO: Add a key attribute set to the value of the index position\n\t\t// Hint: use a ternary operator\n\t\t<div\n\t\t\tclassName={clsx({\n\t\t\t\t\"bucket-row\": true,\n\t\t\t\t[item.eagerness]: true,\n\t\t\t\tcomplete: item.completed,\n\t\t\t})}\n\t\t\tkey={item.id}\n\t\t>\n\t\t\t<div onClick={() => props.completeBucketItem(item.id)}>{item.text}</div>\n\t\t\t<div className=\"icons\">\n\t\t\t\t<p onClick={() => setEdit(item)}> ‚úèÔ∏è</p>\n\t\t\t\t{/* TODO: Add an onClick event that will invoke the removeBucketItem method passing in the `item.id` */}\n\t\t\t\t<p onClick={() => props.removeBucketItem(item.id)}> üóëÔ∏è</p>\n\t\t\t</div>\n\t\t</div>\n\t));\n}\n\nexport default Bucket;\n","import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n\n    // TODO: Write logic to add the new bucket item to the bucket state variable\n    setBucket([...bucket, item]);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n      \n      // TODO: Write logic that marks an item as complete or incomplete when invoked\n      if (item.id === id) {\n        return {\n        ...item,\n        completed: !item.completed\n        };\n        }\n      return item;\n    });\n\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    // TODO: Write logic that will return an array of items that don't contain the ID passed to this function\n    let filteredBucket = bucket.filter((item) => item.id !== id);\n\n    // TODO: Update the bucket state variable\n    setBucket(filteredBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n","import './App.css';\nimport BucketList from './components/BucketList';\n\nfunction App() {\n  return (\n    <div className=\"bucket-app\">\n      <BucketList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}